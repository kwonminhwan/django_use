# 장고 프로젝트 생성
django-admin startproject  firstpjt .

# 서버 실행
python manage.py runserver

# 앱 생성
python manage.py startapp articles

# 앱 등록
생성할때 사용했던 이름을
INSTALLED_APPS 부분에 문자열로 입력

# 프로젝트 폴더
# settings.py -프로젝트의 모든 설정을 관리
# urls.py -요청 들어오면 URL에 따라 이에 해당하는 적절한 views를연결
# manage.py -Django 프로젝트와 다양한 방법으로 상호작용 하는 커맨드라인 유틸리티 명령어 집합

# 앱 폴더
# admin.py -관리자용 페이지 설정
# models.py -DB와관련되 model을 정의 ,MTV패턴의 M
# views.py -http요청을 처리하고 해당 요청에 대한 응답을 반환 ,MTV 패턴의 V (중요******)

#  urls.py ->(요청) views.py

# url경로는 반드시 '/'로 끝나야함

# app폴더 / templates(이름 필수) / -> 아무렇게 하여도 상관없음

render 함수
- 주어진 템플릿을 주어진 컨텍스트 데이터(응답 데이터)와 결합하고 렌더링 된 텍스트와 함게  Httpresponse 응답 객체를 반환하는 함수 ( 즉. 응답 데이터를 객체로 반환)
1. request
- 응답을 생성하는데 사용되는 요청 객체
2. template_name 
- 템플릿 이름의 경로
3. context
- 템플릿에서 사용할 데이터( 딕셔너리 타입으로 작성)

ex) render(request,template_name,context)


# gitignore 만드는법
구글에 gitignore 검색후 python ,django 및 필용한 거 입력후  .gitignore 파일생성후 붙여넣기


(****************중요******************)
# admin.py 파일 (관리자 페이지)
관리자 페이지 관리하는 용도

# models.py 파일 (데이터 베이스) --> views.py 와 연결
데이터 베이스와 무엇을 소통할지 명시 (중요***************************)

# urls.py 주소를 입력할시 어느 파일 불러올지 결정


# html 파일 만들떄 !입력후 엔터

# migration는 데이버 베이스의 정보가 바뀌었을 때 동기화하는 작업을 뜻함